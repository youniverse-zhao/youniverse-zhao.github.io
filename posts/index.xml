<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Youniverse</title><link>https://youniverse.site/posts/</link><description>Recent content in Posts on Youniverse</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 06 Jan 2023 15:23:23 +1100</lastBuildDate><atom:link href="https://youniverse.site/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Coursera | Machine Learning Specialisation (0/n)</title><link>https://youniverse.site/posts/2023/01/coursera-machine-learning-specialisation-0/n/</link><pubDate>Fri, 06 Jan 2023 15:23:23 +1100</pubDate><guid>https://youniverse.site/posts/2023/01/coursera-machine-learning-specialisation-0/n/</guid><description>Recently, I&amp;rsquo;ve been thinking of picking up machine learning as it may be interesting to work on some toy projects. I started working on the Machine Learning Specialisation on Coursera. To me, Prof. Andrew Ng&amp;rsquo;s Machine Learning course on Coursera is one of the go-to material to get started with Machine Learning. This is my second time learning this course on Coursera, and the first time I did it, it was not yet a specialisation.</description><content type="html"><![CDATA[<p>Recently, I&rsquo;ve been thinking of picking up machine learning as it may be interesting to work on some toy projects. I started working on the Machine Learning Specialisation on Coursera. To me, Prof. Andrew Ng&rsquo;s <a href="https://www.coursera.org/specializations/machine-learning-introduction">Machine Learning course on Coursera</a> is one of the go-to material to get started with Machine Learning. This is my second time learning this course on Coursera, and the first time I did it, it was not yet a specialisation.</p>
<p>üëâ <em>There are certainly other materials online that can be used to start my machine learning journey, but to me, this specialisation on Coursera is the simplest to get my first touch of machine learning. I don&rsquo;t need to think really hard to understand its content and it is much shorter compared to other materials.</em></p>
]]></content></item><item><title>üìö | Show Your Work</title><link>https://youniverse.site/posts/2023/01/show-your-work/</link><pubDate>Tue, 03 Jan 2023 22:39:35 +1100</pubDate><guid>https://youniverse.site/posts/2023/01/show-your-work/</guid><description>&amp;ldquo;Build sharing into my routine.&amp;rdquo;</description><content type="html"><![CDATA[<p><img src="./images/bookcover-show-your-work.jpg" alt=""></p>
<p>&ldquo;Build sharing into my routine.&rdquo;</p>
]]></content></item><item><title>Coursera | Machine Learning Specialisation (2/n) - Supervised Learning</title><link>https://youniverse.site/posts/2023/01/coursera-machine-learning-specialisation-2/n-supervised-learning/</link><pubDate>Mon, 02 Jan 2023 15:11:00 +1100</pubDate><guid>https://youniverse.site/posts/2023/01/coursera-machine-learning-specialisation-2/n-supervised-learning/</guid><description>Supervised Learning ‚ÑπÔ∏è Supervised machine learning, or supervised learning, refers to algorithms that learn the input to output, or $x$ to $y$, mapping.
The key characteristic of supervised learning is that you give your learning algorithm examples to learn from, i.e., the training set, which include the right answers, i.e., the correct label $y$ for a given input $x$. With the correct pairs of input $x$ and desired output label $y$, the learning algorithm learns to take just the input alone without the output label and gives a reasonably accurate prediction of the output.</description><content type="html"><![CDATA[<h2 id="supervised-learning">Supervised Learning</h2>
<p>‚ÑπÔ∏è <em><strong>Supervised machine learning</strong></em>, or <em><strong>supervised learning</strong></em>, refers to algorithms that learn the input to output, or $x$ to $y$, mapping.</p>
<p>The key characteristic of supervised learning is that you give your learning algorithm examples to learn from, i.e., the <strong>training set</strong>, which include the right answers, i.e., the correct label $y$ for a given input $x$. With the correct pairs of input $x$ and desired output label $y$, the <strong>learning algorithm</strong> learns to take just the input alone without the output label and gives a reasonably accurate prediction of the output. This means, with supervised learning, you have to &ldquo;train your model&rdquo; with some example data containing both the input $x$ and the ideal output $y$. Then, once your model is &ldquo;trained&rdquo;, you can use it to take unseen input $x$ to predict the corresponding output.</p>
<p><img src="./images/supervised-learning-overview.png" alt=""></p>
<p>üëâ <em>This diagram is not a very good illustration as I was trying to pack information from different aspects into a single diagram. I may need to split it into different components and diagrams for different machine learning steps.</em></p>
<h3 id="definitions-and-notations">Definitions and Notations</h3>
<ul>
<li>
<p><strong>Training set</strong>: the dataset that is used to train a model, i.e., all training examples;</p>
</li>
<li>
<p>$(x, y)$: a single training example;</p>
<ul>
<li>Lowercase $x$: the standard notation to denote <strong>input</strong>, or <strong>input variable</strong>, or <strong>feature</strong>;</li>
<li>Lowercase $y$: the standard notation to denote <strong>output</strong>, or <strong>target variable</strong>;</li>
</ul>
</li>
<li>
<p>$(x^{(i)}, y^{(i)})$: a specific training example, corresponds to a specific row in a table.</p>
<ul>
<li>The superscript tells us that it refers to the $i$th training example;</li>
</ul>
</li>
<li>
<p>$m$: the total number of training examples;</p>
</li>
</ul>
<h3 id="the-model-function">The Model Function</h3>
<p>‚ÑπÔ∏è When designing a <strong>learning algorithm</strong>, a key question is how to represent the <strong>model function</strong> (or <strong>model</strong> or <strong>hypothesis</strong>), $f$. Or, in other words, what is the math formula for $f$?</p>
<ul>
<li>‚ùìHow do I know what model function I should use? Does it have to be based on experience or it can be determined systematically?</li>
</ul>
<h3 id="the-cost-function">The Cost Function</h3>
<p>‚ÑπÔ∏è You also need to construct a <strong>cost function</strong>, $J(w, b)$, which tells us how well a model is doing, so that we can try to improve its performance.</p>
<p>Specifically, the cost function, $J(w, b)$, tells us how big the difference is between the predicted value, $\hat{y}$, and the correct value, $y$, given the model parameters $w$ and $b$.</p>
<p>‚ùóÔ∏èThe idea of a cost function is one of the most universal and important ideas in machine learning, and is used in both linear regression and many of the most advanced AI models in the world.</p>
<h3 id="the-learning-algorithm">The Learning Algorithm</h3>
<p>Once the model function and the cost function have both been defined, the learning algorithm tries to find values for the parameters $w$ and $b$ that makes the cost $J(w, b)$ as small as possible, i.e., the learning algorithm is trying to find a straight line to fit the training set.</p>
<h2 id="linear-regression">Linear Regression</h2>
<h3 id="univariate-linear-regression">Univariate Linear Regression</h3>
<p>‚ÑπÔ∏è <strong>Univariate linear regression</strong> is a linear model with one input variable.</p>
<h4 id="the-model-function-1">The Model Function</h4>
<p>The model function, $f$, can be a <strong>linear function</strong>, such as:
$$\hat{y} = f_{w, b}(x) = w * x + b$$</p>
<ul>
<li>‚ùóÔ∏èA &ldquo;linear function&rdquo; is a straight line.</li>
<li>$f$ is a function that takes $x$ as input and, depending on the values of $w$ and $b$, outputs some value for $\hat{y}$.</li>
<li>$w$ and $b$ are numbers and they are the parameters of the <strong>model</strong>.
They determine the value of $\hat{y}$ given an input $x$.
<ul>
<li>$w$ is called <strong>weight</strong></li>
<li>$b$ is called <strong>bias</strong></li>
</ul>
</li>
</ul>
<p>‚ÑπÔ∏è This model is called <strong>Linear regression</strong>, and this is a linear regression with a single variable, or <strong>univariate linear regression</strong>.</p>
<ul>
<li>&ldquo;One variable&rdquo; means that there is a single input variable.</li>
<li>‚ùóÔ∏èLinear regression is trying to fit a straight line to your data. It tries to predict a number with the fitted line.</li>
</ul>
<p>With the linear regression model, $f_{w, b}(x)$, given any $x^{(i)}$, the model makes a prediction for $y^{(i)}$, which is $\hat{y}^{(i)}$. I.e., given $(x^{(i)}, y^{(i)})$, $\hat{y}^{(i)} = f(x^{(i)}) = w * x^{(i)} + b$.</p>
<h4 id="the-cost-function-1">The Cost Function</h4>
<p>‚ÑπÔ∏è How to measure how well a line fits the training data? One simple way is to use the <strong>squared error cost function</strong>:
$$
\begin{aligned}
J(w,b) &amp;= \dfrac{1}{2m}\sum^m_{i = 1}(\hat{y}^{(i)} - y^{(i)})^2 \ &amp;= \dfrac{1}{2m}\sum^m_{i = 1}(f_{w, b}(x) - y^{(i)})^2 \text{\ \ \ (univariate linear regression)}
\end{aligned}
$$</p>
<ul>
<li>$\hat{y}^{(i)} - y^{(i)}$ is the <strong>error</strong>, i.e., the difference between the actual and the prediction, indicating how far off the prediciton is from the target;</li>
<li>$(\hat{y}^{(i)} - y^{(i)})^2$ is the squared difference;</li>
<li>$m$ is the number of training examples;</li>
<li>The squared differences are summed over all the $m$ training examples and divided by $2m$ to produce the cost, $J(w, b)$.</li>
</ul>
<p>In machine learning, different people use different cost functions for different applications, but the squared error cost function is by far the most commonly used one for linear regression.</p>
<h4 id="the-learning-algorithm-1">The Learning Algorithm</h4>
<p>For linear regression with the squared error cost function, there is always a single minimum, as it is a <strong>convex function</strong>. However, some other functions $J(w, b)$ may not be a convex function and they may not have a single minimum.</p>
<p>We need an efficient algorithm that can be implemented in code to automatically find the values for $w$ and $b$ that give the best fit line.</p>
<p>‚ÑπÔ∏è <strong>Gradient descent</strong> is an algorithm that can be used to minimise any function.</p>
<p>We use gradient descent to find a pair of parameters $w$ and $b$, with which we can make the predicted value, $\hat{y}$, as close to the correct value, $y$, as possible. With a given pair of $w$ and $b$, we check how accurate the prediciton is using the cost function, $J(w, b)$, and update $w$ and $b$ based on the result, and then we check again. This sequence is repeated till $w$ and $b$ and make the prediction reasonably accurate.</p>
<p>Process:</p>
<ol>
<li>Start off with some random values for $w$ and $b$;</li>
<li>With gradient descent, the values for $w$ and $b$ are getting updated depending on the corresponding cost $J(w, b)$;
$$
\begin{aligned}
w &amp;= w - \alpha\dfrac{d}{dw}J(w,b) \ &amp;= w - \alpha\dfrac{1}{m}‚àë^m_{i=1}(f_{w,b}(x^{(i)}) - y^{(i)}) x^{(i)} \
b &amp;= b - \alpha\dfrac{d}{db}J(w,b) \ &amp;= w - \alpha\dfrac{1}{m}‚àë^m_{i=1}(f_{w,b}(x^{(i)}) - y^{(i)})
\end{aligned}
$$
<ul>
<li>$\alpha$: the <strong>learning rate</strong>;
<ul>
<li>usually a small positive number between 0 and 1;</li>
<li>controls how big a step is;</li>
</ul>
</li>
<li>$\dfrac{d}{dw}J(w,b)$ and $\dfrac{d}{db}J(w,b)$: the <strong>derivative term</strong> of the cost function $J(w, b)$;
<ul>
<li>indicates the direction in which to take the steps;</li>
<li>comes from calculus;</li>
</ul>
</li>
<li>This version of gradient descent is called <strong>batch gradient descent</strong>, as on every step, we are looking at all of the training examples, instead of just a subset of them;</li>
</ul>
</li>
<li>Step 2 goes on and on until the cost $J(w, b)$ settles at somewhere near the minimum.</li>
</ol>
<p>Gradient descent repeats the above updates until the algorithm converges.</p>
<ul>
<li>
<p>&ldquo;Converge&rdquo; means that a local minimum has been reached, i.e., $w$ and $b$ no longer change much with each update.</p>
</li>
<li>
<p>‚ùìHow is $\dfrac{d}{dw}J(w,b)$ and $\dfrac{d}{db}J(w,b)$ calculated?</p>
</li>
<li>
<p>‚ùìWhen should I stop updating $w$ and $b$, or when are they considered converged? How do I measure $w$ and $b$ no longer change much?</p>
</li>
</ul>
<h3 id="multiple-linear-regression">Multiple Linear Regression</h3>
<p>‚ÑπÔ∏è Univariate linear regression is the simplest version of the linear regression model, a more general form is <strong>multiple linear regression</strong>, which has multiple input variables.</p>
<h4 id="more-notations">More Notations</h4>
<ul>
<li>$n$: the number of features for each training example;</li>
<li>$x^{(i)}$: denotes a specific training example, and in this case it is a list containing $n$ features;</li>
<li>$x_j^{(i)}$: denotes the $j$th feature of the $i$th training example, i.e., $(x_1, x_2, &hellip;, x_n)$ represents a single training example;</li>
</ul>
<h4 id="vectorisation">Vectorisation</h4>
<p>$$
f_{\vec w, b}(\vec x) = w_1 * x_1 + w_2 * x_2 + &hellip; + w_ * x_n + b
$$</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Python" data-lang="Python"><span style="display:flex;"><span>f <span style="color:#f92672">=</span> w[<span style="color:#ae81ff">0</span>] <span style="color:#f92672">*</span> x[<span style="color:#ae81ff">0</span>] <span style="color:#f92672">+</span> 
</span></span><span style="display:flex;"><span>    w[<span style="color:#ae81ff">1</span>] <span style="color:#f92672">*</span> x[<span style="color:#ae81ff">1</span>] <span style="color:#f92672">+</span> 
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">...</span>
</span></span><span style="display:flex;"><span>    w[N] <span style="color:#f92672">*</span> x[N] <span style="color:#f92672">+</span> 
</span></span><span style="display:flex;"><span>    b
</span></span></code></pre></div><hr>
<p>$$
f_{\vec w, b}(\vec x) = \sum^n_{j = 1}w_j * x_j + b
$$</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Python" data-lang="Python"><span style="display:flex;"><span>f <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> j <span style="color:#f92672">in</span> range(n):
</span></span><span style="display:flex;"><span>  f <span style="color:#f92672">=</span> f <span style="color:#f92672">+</span> w[j] <span style="color:#f92672">*</span> x[j]
</span></span><span style="display:flex;"><span>f <span style="color:#f92672">=</span> f <span style="color:#f92672">+</span> b
</span></span></code></pre></div><hr>
<p>$$
f_{\vec w, b}(\vec x) = \vec w * \vec x + b
$$</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Python" data-lang="Python"><span style="display:flex;"><span>f <span style="color:#f92672">=</span> np<span style="color:#f92672">.</span>dot(w, x) <span style="color:#f92672">+</span> b
</span></span></code></pre></div><ul>
<li>
<p><code>np.dot</code> is a vectorised implementation of the dot product operation between two vectors;
$$
\begin{aligned}
a * b
&amp;= \begin{bmatrix} {a_0} \ {a_1} \ {a_2} \ {a_3} \end{bmatrix} * \begin{bmatrix} {b_0} \ {b_1} \ {b_2} \ {b_3} \end{bmatrix} \ \ \
&amp;= \begin{bmatrix} a_0 * b_0 + a_1 * b_1 + a_2 * b_2 + a_3 * b_3 \end{bmatrix}
\end{aligned}
$$</p>
</li>
<li>
<p>It runs much faster than the first two versions;</p>
</li>
</ul>
<h4 id="the-model-function-2">The Model Function</h4>
<p>Original version of the linear model function:</p>
<p>$$f_{w,b}(x) = w * x + b$$</p>
<p>An updated version of the linear model function for more than one input features:</p>
<p>$$f_{w,b}(x) = w_1 * x_1 + w_2 * x_2 + &hellip; + w_ * x_n + b$$</p>
<p>Equivaclently,</p>
<p>$$f_{\vec w, b}(\vec x) = \vec w * \vec x + b$$</p>
<ul>
<li>$\vec w = [w_1, w_2, &hellip;, w_n]$ is a <strong>row vector</strong>;</li>
<li>$b$ is a single number, called a <strong>scalar</strong>;</li>
<li>$\vec x = [x_1, x_2, &hellip;, x_n]$ is a <strong>row vector</strong>;</li>
<li>The $*$ in $\vec w * \vec x$ is the <strong>dot product</strong> in linear algebra.</li>
</ul>
<h4 id="the-cost-function-2">The Cost Function</h4>
<p>The cost function for multiple linear regression is still:</p>
<p>$$J(w,b) = \dfrac{1}{2m}\sum^m_{i = 1}(\hat{y}^{(i)} - y^{(i)})^2$$</p>
<p>It is just the prediction $\hat{y}$ is calculated with the new model function with multiple input features.</p>
<p>$$\hat{y} = f_{\vec w, b}(\vec x) = \vec w * \vec x + b$$</p>
<h4 id="the-learning-algorithm-2">The Learning Algorithm</h4>
<p>We are still using gradient descent as the learning algorithm. However, this time, we need to update $w_j$ for each of the $n$ input features.</p>
<p>$$
\begin{aligned}
w_j &amp;= w_j - \alpha\dfrac{d}{dw_j}J(\vec w, b) \\
&amp;= w_j - \alpha\dfrac{1}{m}\sum^m_{i = 1}(f_{\vec w, b}(x^{(i)}) - y^{(i)})x_j^{(i)} \\
\end{aligned}
$$</p>
<ul>
<li>where $j = 1, 2, &hellip;, n$</li>
</ul>
<p>$$
\begin{aligned}
b &amp;= b - \alpha\dfrac{d}{db}J(\vec w, b) \\
&amp;=b - \alpha\dfrac{1}{m}\sum^m_{i = 1}(f_{\vec w, b}(x^{(i)}) - y^{(i)}) \\
\end{aligned}
$$</p>
<h1 id="references">References</h1>
<p>The content of this note is generated from <a href="https://www.coursera.org/learn/machine-learning?specialization=machine-learning-introduction">
Supervised Machine Learning: Regression and Classification</a></p>
]]></content></item><item><title>Coursera | Machine Learning Specialisation (1/n) - Overview</title><link>https://youniverse.site/posts/2022/12/coursera-machine-learning-specialisation-1/n-overview/</link><pubDate>Fri, 30 Dec 2022 14:10:34 +1100</pubDate><guid>https://youniverse.site/posts/2022/12/coursera-machine-learning-specialisation-1/n-overview/</guid><description>The current version is a specialisation consisting of three courses:
Supervised Machine Learning: Regression and Classification; Advanced Learning Algorithms; Unsupervised Learning, Recommenders, Reinforcement Learning. This article is a brief summary of Machine Learning taken from the specialisation.
The first course in the specialisation, &amp;ldquo;Supervised Machine Learning: Regression and Classification&amp;rdquo;, provides a summary of the machine learning domain and introduces the details of supervised machine learning.
Machine Learning ‚ÑπÔ∏è Machine learning (ML) is the science of getting computers to learn without being explicitly programmed.</description><content type="html"><![CDATA[<p>The current version is a specialisation consisting of three courses:</p>
<ul>
<li>Supervised Machine Learning: Regression and Classification;</li>
<li>Advanced Learning Algorithms;</li>
<li>Unsupervised Learning, Recommenders, Reinforcement Learning.</li>
</ul>
<p>This article is a brief summary of Machine Learning taken from the specialisation.</p>
<p>The first course in the specialisation, &ldquo;Supervised Machine Learning: Regression and Classification&rdquo;, provides a summary of the machine learning domain and introduces the details of supervised machine learning.</p>
<h2 id="machine-learning">Machine Learning</h2>
<p>‚ÑπÔ∏è <strong>Machine learning</strong> (<strong>ML</strong>) is the science of getting computers to learn without being explicitly programmed.</p>
<p>üí° We use computers to simplify our lives, and we tell computers how to do things by programming against them. <!-- raw HTML omitted -->Some of the tasks can be translated into programs easily, however, there are ones that cannot be translated into programs easily.<!-- raw HTML omitted --> Those tasks that cannot be converted to programs easily are potential application domains of machine learing, where we tell computers to learn to do certain tasks by themselves.</p>
<p><img src="./images/machine-learning-overview.png" alt=""></p>
<p>The two main types of machine learning:</p>
<ul>
<li><em>Supervised learning</em></li>
<li><em>Unsupervised learning</em></li>
</ul>
<p>Others</p>
<ul>
<li>Recommender systems</li>
<li>Reinforcement learning</li>
</ul>
<h2 id="supervised-learning">Supervised Learning</h2>
<p>‚ÑπÔ∏è <strong>Supervised machine learning</strong>, or <strong>supervised learning</strong>, refers to algorithms that learn the input to output, or $x$ to $y$, mapping.</p>
<p>The key characteristic of supervised learning is that you give your learning algorithm examples to learn from. That includes the right answers, i.e., the correct label $y$ for a given input $x$. With the correct pairs of input $x$ and desired output label $y$, the learning algorithm learns to take just the input alone without the output label and gives a reasonably accurate prediction of the output. This means, with supervised learning, you have to &ldquo;train your model&rdquo; with some example data containing both the input $x$ and the ideal output $y$. Then, once your model is &ldquo;trained&rdquo;, you can use it to take unseen input $x$ to predict the corresponding output.</p>
<p>There are two major types of supervised learning:</p>
<ul>
<li><strong>Regression</strong>: The target is to predict a number from infinitely posibilities.</li>
<li><strong>Classification</strong>: The target is to predict a category from a smaller number of possibilities.</li>
</ul>
<h2 id="unsupervised-learning">Unsupervised Learning</h2>
<p>‚ÑπÔ∏è The task of <strong>unsupervised learning</strong> is to find some structure or pattern or just discover something interesting within the data.</p>
<p>In unsupervised learning, the data comes only with the input $x$, and the algorithm has to find out some structure, pattern, or something interesting in the input data.</p>
<p>‚ùóÔ∏èThe word &ldquo;<em>unsupervised</em>&rdquo; means that we are not supervising the algorithm by providing the correct output for every input, instead, we let the algorithm to figure out the output by itself.</p>
<p>Types of unsupervised learning:</p>
<ul>
<li><strong>Clustering</strong>: The algorithm groups the input data into clusters.</li>
<li><strong>Anomaly detection</strong>: This type of algorithms are used to detect unusual events.</li>
<li><strong>Dimensionality reduction</strong>: It takes a big data set and compress it to a much smaller dataset while losing as little information as possible.</li>
</ul>
<h1 id="references">References</h1>
<p>The content of this note is generated from <a href="https://www.coursera.org/learn/machine-learning?specialization=machine-learning-introduction">
Supervised Machine Learning: Regression and Classification</a></p>
<p>[]:</p>
]]></content></item><item><title>YAK8s 101: 1 | What is K8s? [Note]</title><link>https://youniverse.site/posts/2021/09/yak8s-101-1-what-is-k8s-note/</link><pubDate>Wed, 08 Sep 2021 22:17:58 +1000</pubDate><guid>https://youniverse.site/posts/2021/09/yak8s-101-1-what-is-k8s-note/</guid><description>What is K8s? | Kubernetes is a platform to orchestrate containers.
It looks like this:
ref: Kubernetes Documentation (Kubernetes Components). Accessed 8 Sep 2021, https://kubernetes.io/docs/concepts/overview/components/</description><content type="html"><![CDATA[<h2 id="what-is-k8s">What is K8s?</h2>
<p>| Kubernetes is a platform to orchestrate containers.</p>
<p>It looks like this:</p>
<p><img src="https://d33wubrfki0l68.cloudfront.net/2475489eaf20163ec0f54ddc1d92aa8d4c87c96b/e7c81/images/docs/components-of-kubernetes.svg" alt=""></p>
<ul>
<li>ref: Kubernetes Documentation (Kubernetes Components). Accessed 8 Sep 2021, <a href="https://kubernetes.io/docs/concepts/overview/components/">https://kubernetes.io/docs/concepts/overview/components/</a></li>
</ul>
]]></content></item><item><title>Install Golang From Source</title><link>https://youniverse.site/posts/2021/06/install-golang-from-source/</link><pubDate>Thu, 17 Jun 2021 00:09:57 +1000</pubDate><guid>https://youniverse.site/posts/2021/06/install-golang-from-source/</guid><description>Why? When setting up a Golang working environment, broadly speaking, there are two ways: using a package manager/installer or installing from source. Most of the time it&amp;rsquo;s much easier to use a package manager or installer and by executing one or two commands, the entire working environment is ready to use. Well, this time, I just would like to see how manual installation works.
Head Let me first list all the steps that I can think of for the installation:</description><content type="html"><![CDATA[<h2 id="why">Why?</h2>
<p>When setting up a Golang working environment, broadly speaking, there are two ways: using a package manager/installer or installing from source. Most of the time it&rsquo;s much easier to use a package manager or installer and by executing one or two commands, the entire working environment is ready to use. Well, this time, I just would like to see how manual installation works.</p>
<h2 id="head">Head</h2>
<p>Let me first list all the steps that I can think of for the installation:</p>
<ol>
<li>Get the Golang source code from somewhere, maybe a Github repo</li>
<li>Build the Golang source into executable binaries</li>
<li>üò± It seems that I need to have a Go compiler ready before Step 2 (<strong>bootstrap</strong>)</li>
<li>Install the executable binaries, there might be scripts doing this or there are standard places to put these binaries</li>
<li>A working Go installation depends on several environment varialbes, I may need to set up those variables</li>
<li>Verify the installation</li>
</ol>
<p>Let me think through the process carefully.</p>
<h3 id="the-result-of-the-process">The result of the process</h3>
<p>Of course, after running through the process I should have a working Go environment available on my computer, but since I&rsquo;m building from source, I&rsquo;ll have to <code>git clone</code> two copies of the Golang source code, one for the the <a href="#the-compiler">compiler</a> and the other for the <a href="#the-source">actual source</a>. Again, since I will have two copies of Go, I need to tell the system which one to use for the <code>go</code> command.</p>
<h3 id="the-compiler">The compiler</h3>
<p>The Go toolchain is written in Go. To build it, I need a Go compiler installed (<a href="https://golang.org/doc/install/source#go14">ref</a>).</p>
<p>This is the compiler that is used for &ldquo;bootstrapping&rdquo; the installation. This compiler can be a fully working Go toolchain already setup on my computer or a designated version of Go commands setup just for building and installing of Golang from source.</p>
<ul>
<li>üò± A working version of Golang means in order to build Go from source, I need to have a working version of Golang on my system.</li>
<li>üëª A designated version of Go setup just for building and installing Golang requires the use of an environment variable named <code>GOROOT_BOOTSTRAP</code>, which directs the bootstrap process to the designated Go compiler.
<ul>
<li>In this case, <code>$GOROOT_BOOTSTRAP/bin/go</code> should be the <code>go</code> command to use.</li>
</ul>
</li>
</ul>
<h3 id="the-source">The source</h3>
<p>The source code of Golang is obtained with Git, which means I need to have Git installed locally. I need to find a good place to put the source code, and as suggested by the doc (<a href="https://golang.org/doc/install/source#fetch">ref</a>), I can use <code>goroot</code> as the folder name. I need to run a build script to build this copy of source code and the Go tool chain will be installed in <code>&lt;parent dir&gt;/goroot/bin</code>.</p>
<h3 id="use-environment-variables-to-tell-the-difference">Use environment variables to tell the difference</h3>
<p>The Go environment uses environment vairables (<a href="https://golang.org/doc/install/source#environment">link</a>) to help the OS to locate Go distributions:</p>
<ul>
<li><code>GOROOT</code>: the directory containing the Golang distribution (binary files <code>bin</code>, archive files <code>pkg</code>, source code <code>src</code>,  and others)
<ul>
<li>The Go distribution&rsquo;s executables are in <code>GOROOT/bin</code>, e.g., the <code>go</code> command</li>
</ul>
</li>
<li><code>GOPATH</code>: the directorying containing projects outside the Go distribution (three subdirectories, i.e., <code>bin</code>, <code>pkg</code>, and <code>src</code>)</li>
<li><code>GOBIN</code>: the directory containing executables outside the Go distribution, by default, <code>GOBIN</code> is set to <code>$GOPATH/bin</code></li>
</ul>
<h4 id="note">Note:</h4>
<p>When using the official Go installer (<a href="https://golang.org/doc/install#download">link</a>) to do the installation, the Go distribution will be installed in <code>/usr/local/go</code> (<a href="https://golang.org/doc/install#install">ref</a>) and its structure is something like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>/
</span></span><span style="display:flex;"><span>‚îú‚îÄ usr/
</span></span><span style="display:flex;"><span>‚îÇ  ‚îú‚îÄ local/
</span></span><span style="display:flex;"><span>‚îÇ  ‚îÇ  ‚îú‚îÄ go/
</span></span><span style="display:flex;"><span>‚îÇ  ‚îÇ  ‚îÇ  ‚îú‚îÄ bin/
</span></span><span style="display:flex;"><span>‚îÇ  ‚îÇ  ‚îÇ  ‚îú‚îÄ pkg/
</span></span><span style="display:flex;"><span>‚îÇ  ‚îÇ  ‚îÇ  ‚îú‚îÄ src/
</span></span><span style="display:flex;"><span>|  |  |  ‚îú‚îÄ &lt;other dirs or files&gt;
</span></span></code></pre></div><ul>
<li>
<p>This directory, <code>/usr/local/go</code>, is the <code>GOPATH</code> and it has three subdirectories containing the source files (<code>src</code>), archive files (<code>pkg</code>), and binary files (<code>bin</code>).</p>
</li>
<li>
<p>The <code>/usr/local/go/bin</code> (the value for <code>GOROOT/bin</code> if <code>GOROOT</code> is set) directory is also added to the <code>PATH</code> environment variable so that all go binaries are accessible as executables from the terminal.</p>
</li>
</ul>
<h2 id="fetch-the-source-step-1-and-3">Fetch the source (Step 1 and 3)</h2>
<p>I need to have a version of Go toolchain just for bootstrapping the building process. I can use Go 1.4, &ldquo;the last Go release with a compiler written in C&rdquo;. This version is available in the official Golang Github repo.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span><span style="color:#75715e"># clone the go source repo into a folder, go1.4 in this case</span>
</span></span><span style="display:flex;"><span>git clone git@github.com:golang/go.git go1.4
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># navigate to the source folder</span>
</span></span><span style="display:flex;"><span>cd go1.4
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># checkout the release-branch.go1.4 branch</span>
</span></span><span style="display:flex;"><span>git checkout release-branch.go1.4
</span></span></code></pre></div><p><code>cd</code> into the <code>src</code> subdirectory, and set <code>CGO_ENABLED=0</code> in the envionment, and run <code>make.bash</code></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span><span style="color:#75715e"># navigate into the src directory</span>
</span></span><span style="display:flex;"><span>cd src
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># set environment variable CGO_ENABLED to 0</span>
</span></span><span style="display:flex;"><span>CGO_ENABLED<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># run make.bash</span>
</span></span><span style="display:flex;"><span>./make.bash
</span></span></code></pre></div><p>Once the Golang v1.4 has been unpacked, I need to set the <code>GOROOT_BOOTSTRAP</code> environment variable to its directory, so that <code>$GOROOT_BOOTSTRAP/bin/go</code> is the <code>go</code> command to use for building the Golang source code.</p>
<ul>
<li>‚ùóÔ∏è Do not attempt to reuse this git clone in the later steps, this is the bootstrapping compiler&rsquo;s repo.</li>
<li>‚ùóÔ∏è The go1.4 bootstrap toolchain must be able to properly traverse the go1.4 sources that it assumes are present under this repository root</li>
</ul>
<h2 id="fetch-the-source-step-1-again-">Fetch the source (Step 1 again üòì)</h2>
<p>This time I need to get the copy of Golang source code that will be built.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span><span style="color:#75715e"># clone the source code into a folder, in this case, a folder named goroot</span>
</span></span><span style="display:flex;"><span>git clone https://go.googlesource.com/go goroot
</span></span><span style="display:flex;"><span><span style="color:#75715e"># or</span>
</span></span><span style="display:flex;"><span>git clone git@github.com:golang/go.git goroot
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># navigate into goroot</span>
</span></span><span style="display:flex;"><span>cd goroot
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># get all the tags (so that I can select a particular version)</span>
</span></span><span style="display:flex;"><span>git fetch --all --tags 
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># checkout a particular tag, e.g., go1.16.3</span>
</span></span><span style="display:flex;"><span>git checkout go1.16.3
</span></span><span style="display:flex;"><span><span style="color:#75715e"># or create a new branch from a tag</span>
</span></span><span style="display:flex;"><span>git checkout -b go1.16.3 go1.16.3
</span></span></code></pre></div><p>Go will be installed in the directory where it is checkout out. If Go is checked out in <code>$HOME/goroot</code>, executables will then be installed in <code>$HOME/goroot/bin</code>.</p>
<p>The directory containing the Golang source code may have any name, but if that folder is <code>$HOME/go</code>, it will conflict with the default location of <code>$GOPATH</code>.</p>
<h2 id="build-and-install-step-2">Build and install (Step 2)</h2>
<p>To build the Go distribution, just run the commands below, and once the commands finish executing, the building part is done and the Go executables should be in <code>$HOME/goroot/bin</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span><span style="color:#75715e"># navigate into the src subfolder</span>
</span></span><span style="display:flex;"><span>cd src
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># run all.bash</span>
</span></span><span style="display:flex;"><span>./all.bash
</span></span></code></pre></div><p>The &ldquo;installation&rdquo; is done by setting up environment variables (<a href="https://golang.org/doc/install/source#environment">ref</a>):</p>
<ul>
<li><code>GOROOT</code>: The root of the Go distribution, often <code>$HOME/go1.X</code>.
<ul>
<li>Its value is built into the tree when it is compiled, and defaults to the parent of the directory where <code>all.bash</code> was run. There is no need to set this unless I want to switch between multiple local copies of the repository.</li>
<li>The value should be the directory where the second copy of Go source code is check out into</li>
</ul>
</li>
<li><code>GOPATH</code>: The directory where Go projects outside the Go distribution are typically checked out.
<ul>
<li>The value to this variable should be the parent directory of the <code>bin</code>, <code>pkg</code>, and <code>src</code> directory, where the <code>go install</code> result, library archives, and source dependencies are placed respectively.</li>
</ul>
</li>
<li><code>GOBIN</code>: The directory where executables outside the Go distribution are installed using the go command.
<ul>
<li>Most of the time it&rsquo;s just <code>$GOPATH/bin</code></li>
</ul>
</li>
</ul>
<p>Because the Go toolchain (commands) should be available in terminals, <code>$GOROOT/bin</code> and <code>$GOBIN</code> should be added to the <code>PATH</code> environment variable.</p>
<h2 id="test-the-installation">Test the installation</h2>
<p>Once the environment variables are set, I can test the installation.</p>
<p>Check the current go version by executing the command below in a termianl:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>go version
</span></span></code></pre></div><p>Check whether the installed Golang is able to build a &ldquo;Hello, world!&rdquo; project (<a href="https://golang.org/doc/code#Command">ref</a>):</p>
<ul>
<li>Create a <code>main.go</code> file</li>
<li>Do something simple with Golang, e.g., printing &ldquo;Hello, world!&rdquo; to the terminal (shown below).</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-golang" data-lang="golang"><span style="display:flex;"><span><span style="color:#f92672">package</span> <span style="color:#a6e22e">main</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> <span style="color:#e6db74">&#34;fmt&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">main</span>() {
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#e6db74">&#34;Hello, world!&#34;</span>)
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><ul>
<li>In a terminal, navigate to the directory containing the <code>main.go</code> file and execute:</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>go run main.go
</span></span></code></pre></div><p>When I see &ldquo;Hello, world!&rdquo; gets printed in the terminal, I know the installation is good.</p>
<h2 id="update">Update</h2>
<p>How do I update the current installed version to a different one or how do I experiment with my local changes to the Golang source code?</p>
<p>The answer is: just rebuild the updated source.</p>
<p>The code in the <code>$GOROOT/src</code> folder reflects the version of Golang source code I want to build, otherwise <code>git checkout</code> the correct version. Then run</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span><span style="color:#75715e"># navigate into the src subfolder</span>
</span></span><span style="display:flex;"><span>cd $GOROOT/src
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># run all.bash</span>
</span></span><span style="display:flex;"><span>./all.bash
</span></span></code></pre></div><h2 id="tail">Tail</h2>
<p>Now that I have a working Go environment, I can build a 3rd copy of Go source and play with it or I can have multiple Go versions installed at the same time (<a href="https://golang.org/doc/manage-install#installing-multiple">ref</a>).</p>
]]></content></item><item><title>Hello World</title><link>https://youniverse.site/posts/2021/04/hello-world/</link><pubDate>Mon, 26 Apr 2021 01:52:58 +1000</pubDate><guid>https://youniverse.site/posts/2021/04/hello-world/</guid><description>üòä</description><content type="html">&lt;p>üòä&lt;/p></content></item></channel></rss>